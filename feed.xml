<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://weshydev.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://weshydev.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-11-08T22:49:31+00:00</updated><id>https://weshydev.github.io/feed.xml</id><title type="html">blank</title><subtitle>Welcome to the personal website of Omar Elweshy </subtitle><entry><title type="html">How To Create Load Balancer With Nginx And Docker</title><link href="https://weshydev.github.io/blog/2022/how-to-create-load-balancer-with-nginx-and-docker/" rel="alternate" type="text/html" title="How To Create Load Balancer With Nginx And Docker"/><published>2022-12-01T10:00:00+00:00</published><updated>2022-12-01T10:00:00+00:00</updated><id>https://weshydev.github.io/blog/2022/how-to-create-load-balancer-with-nginx-and-docker</id><content type="html" xml:base="https://weshydev.github.io/blog/2022/how-to-create-load-balancer-with-nginx-and-docker/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>It’s crucial to ensure that your web applications are always available and can handle high traffic. That’s where a load balancer comes in - it distributes incoming traffic evenly across multiple servers, maximizing performance and minimizing downtime.</p> <p>But setting up a load balancer can be a daunting task, especially for those who are new to the world of web development. That’s why we’ve created this guide - to walk you through the process of creating a load balancer using Docker and NGINX. These tools are powerful, flexible and easy to use, making them the perfect choice for load balancing.</p> <h2 id="preparation">Preparation</h2> <p>You need to install the following:</p> <ul> <li>Nodejs</li> <li>Docker</li> <li>Nignx</li> </ul> <h2 id="file-structure">File Structure</h2> <p>Our file Structure will be like this</p> <p><img src="/assets/img/node-docker.png" alt="Docker Node Server"/></p> <p>Dockerfile</p> <div class="language-docker highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> node:16</span>
<span class="k">WORKDIR</span><span class="s"> /home/node/app</span>
<span class="k">COPY</span><span class="s"> app /home/node/app</span>
<span class="k">RUN </span>npm <span class="nb">install</span>
<span class="k">RUN </span>npm run app
<span class="k">EXPOSE</span><span class="s"> 3000</span>
</code></pre></div></div> <p>index.js</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">)();</span>

<span class="nx">app</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="s2">`Hello from </span><span class="p">${</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">appId</span><span class="p">}</span><span class="s2"> docker`</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nf">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">app at http://localhost:3000</span><span class="dl">"</span><span class="p">));</span>
</code></pre></div></div> <p>package.json</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"app"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"main"</span><span class="p">:</span><span class="w"> </span><span class="s2">"index.js"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"app"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node index.js"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"keywords"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
    </span><span class="nl">"author"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
    </span><span class="nl">"license"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ISC"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"express"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.18.2"</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h2 id="create-multiple-container">Create Multiple Container</h2> <p>We need to create multiple images point to the nodejs server with different ports</p> <p>First you should build the app into Container</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> nodeapplication <span class="nb">.</span>
</code></pre></div></div> <p>then</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-p</span> &lt;PORT&gt;:3000 <span class="nt">-e</span> <span class="nv">appId</span><span class="o">=</span>&lt;ID&gt; <span class="nt">-d</span> nodeapplication
</code></pre></div></div> <p>the result</p> <p><img src="/assets/img/docker-images.png" alt="Docker Creation"/></p> <p>Now if you checked your browser for every port should be serve your images with spicified ports correctly. for example port 3001</p> <p><img src="/assets/img/docker-id-browser.png" alt="Docker id browser"/></p> <p>and so on.</p> <h2 id="setting-nginx-up">Setting Nginx Up</h2> <p>After Installing Nginx to your machine, we will work with <code class="language-plaintext highlighter-rouge">/etc/nginx/nginx.conf</code>. Copy code below to your <code class="language-plaintext highlighter-rouge">nginx.conf</code> file</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http <span class="o">{</span>
    upstream containers <span class="o">{</span>
        server 127.0.0.1:3001<span class="p">;</span>
        server 127.0.0.1:3002<span class="p">;</span>
        server 127.0.0.1:3003<span class="p">;</span>
        server 127.0.0.1:3004<span class="p">;</span>
        server 127.0.0.1:3005<span class="p">;</span>
    <span class="o">}</span>
    server <span class="o">{</span>
        listen 80<span class="p">;</span>
        location / <span class="o">{</span>
            proxy_pass http://containers/<span class="p">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

events <span class="o">{}</span>
</code></pre></div></div> <p>Now we Created upstream called containers to serve all our backend and we also created server listen to port <code class="language-plaintext highlighter-rouge">80</code> and proxy_pass to our containers upstream.</p> <p>If we visit <code class="language-plaintext highlighter-rouge">localhost</code> we should see nginx balancing and switching between created containters.</p> <p><img src="/assets/video/balancer.gif" alt="balancer on browser"/></p> <p>You can notice that it serve in sequential order that is because nginx uses <a href="https://en.wikipedia.org/wiki/Round-robin_scheduling">Round Robin Algorithm</a></p> <h2 id="conclusion">Conclusion</h2> <p>In conclusion, creating a load balancer with Docker and NGINX is a powerful way to ensure the availability and performance of your web application. By distributing incoming traffic evenly across multiple servers, a load balancer can maximize performance and minimize downtime.</p>]]></content><author><name></name></author><category term="devops"/><category term="nginx"/><category term="docker"/><category term="load-balancer"/><summary type="html"><![CDATA[It's crucial to ensure that your web applications are always available and can handle high traffic. That's where a load balancer comes in.]]></summary></entry><entry><title type="html">How To Manage Dotfiles</title><link href="https://weshydev.github.io/blog/2021/how-to-manage-dotfiles/" rel="alternate" type="text/html" title="How To Manage Dotfiles"/><published>2021-10-07T10:00:00+00:00</published><updated>2021-10-07T10:00:00+00:00</updated><id>https://weshydev.github.io/blog/2021/how-to-manage-dotfiles</id><content type="html" xml:base="https://weshydev.github.io/blog/2021/how-to-manage-dotfiles/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>When your OS crashes or you needed to change it, you will reconfigure <code class="language-plaintext highlighter-rouge">.dotfiles</code> such as <code class="language-plaintext highlighter-rouge">.zsh</code>, <code class="language-plaintext highlighter-rouge">.gitconfig</code> and <code class="language-plaintext highlighter-rouge">.vimrc</code>. These <code class="language-plaintext highlighter-rouge">.dotfiles</code> change over time as you start customizing linux according to your needs. How do we save this configurations to avoid manual work every time ? The answer is <strong>Dotfiles Manager</strong>.</p> <h2 id="how-to-build-a-dotfile-manager">How to build a Dotfile Manager</h2> <p>There are alot of Dotfile Managers out there, for example <a href="https://www.atlassian.com/">atlassian</a>, <a href="https://yadm.io/">yadm</a> and more <a href="https://dotfiles.github.io/utilities/">here</a>. I prefer the scratch way.</p> <p>First of all, you should <a href="https://github.com/new">Create a new repository</a> on GitHub named <code class="language-plaintext highlighter-rouge">.dotfiles</code> and clone it in the $HOME directory where you will host your dotfiles. Clone your repo to the <code class="language-plaintext highlighter-rouge">.dotfiles</code> directory</p> <p>SSH</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:&lt;YOUR_GITHUB_USERNAME&gt;/.dotfiles.git ~/.dotfiles
</code></pre></div></div> <p>HTTPS</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/&lt;YOUR_GITHUB_USERNAME&gt;/.dotfiles.git ~/.dotfiles
</code></pre></div></div> <p>Now, you have an empty directory. The next step is to add your files in it. Move your files to <code class="language-plaintext highlighter-rouge">~/.dotfiles</code>.</p> <p><img src="/assets/img/dotfiles_dir.png" alt="Dotfiles Dir"/></p> <p>For simplicity, we will work on the <code class="language-plaintext highlighter-rouge">.tmux.conf</code> file then you can do this for the rest of files.</p> <p>Now, we will move <code class="language-plaintext highlighter-rouge">.tmux.conf</code> to <code class="language-plaintext highlighter-rouge">~/.dotfiles</code> directory. You can use <code class="language-plaintext highlighter-rouge">mv</code> to move file to <code class="language-plaintext highlighter-rouge">.dotfiles</code>, for example</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mv</span> .tmux.conf .dotfiles/
</code></pre></div></div> <p><img src="/assets/img/mv.png" alt="mv"/></p> <p>With the command <code class="language-plaintext highlighter-rouge">ll -al ~/.dotfiles | grep tmux</code> we search for any files or directories contains tmux name in <code class="language-plaintext highlighter-rouge">~/.dtofiles</code> but not found. After run <code class="language-plaintext highlighter-rouge">mv .tmux.conf .dotfiles</code> and search again <code class="language-plaintext highlighter-rouge">.tmux.conf</code> file moved to <code class="language-plaintext highlighter-rouge">.dotfiles</code> directory successfully.</p> <h4 id="but"><strong>BUT</strong></h4> <p><em>The Tmux configuration has broken</em>. Of course, broken because there is no configuration file in the $HOME directory were in, it’s in the <code class="language-plaintext highlighter-rouge">~/.dotfiles</code> directory. How do we use this file and at the same time keep it tracked by git in <code class="language-plaintext highlighter-rouge">~/.dotfiles</code>?</p> <p>We use <code class="language-plaintext highlighter-rouge">ln</code> util to link file from <code class="language-plaintext highlighter-rouge">~/.dotfiles</code> directory to same file in the $HOME directory where can tmux use it and track all changes.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ln</span> <span class="nt">-s</span> ~/.dotfiles/.tmux.conf ~/.tmux.conf
</code></pre></div></div> <p>With the command above we created a copy of the <code class="language-plaintext highlighter-rouge">.tmux.conf</code> file to the $HOME directory with a link as shown below</p> <p><img src="/assets/img/linking_file.png" alt="Link betweem files"/></p> <p>Everything is ready. By opening <code class="language-plaintext highlighter-rouge">~/dotfiles/.tmux.conf</code> and <code class="language-plaintext highlighter-rouge">~/.tmux.conf</code> side-by-side, every editing happens to any of two files, it happens to another.</p> <p><img src="/assets/video/tracking.gif" alt="Tracking"/> we have a file that configures tmux and same file tracked by git into your <code class="language-plaintext highlighter-rouge">.dotfiles</code> github repo.</p> <p>Finally go to <code class="language-plaintext highlighter-rouge">~/.dotfiles</code> and push to Github.</p> <p><a href="https://github.com/omarelweshy/.dotfiles">Here is my repo</a> with the code.</p> <h2 id="summary">Summary</h2> <p>Let’s summarize some important things we have done.</p> <ol> <li>Create repo named <code class="language-plaintext highlighter-rouge">.dotfiles</code></li> <li>Clone it into your Home dir</li> </ol> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:&lt;YOUR_GITHUB_USERNAME&gt;/.dotfiles.git ~/.dotfiles
</code></pre></div></div> <ol> <li>Move your files to <code class="language-plaintext highlighter-rouge">~/.dotfiles</code> using <code class="language-plaintext highlighter-rouge">mv</code></li> <li>Link your moved files with <code class="language-plaintext highlighter-rouge">ln</code> and it will automatically copied for you</li> <li>Push your files to Github</li> </ol>]]></content><author><name></name></author><category term="linux"/><category term="productivity"/><category term="linux"/><category term="dotfiles"/><summary type="html"><![CDATA[When your OS crashes or you needed to change it, so?]]></summary></entry></feed>