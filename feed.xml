<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://weshydev.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://weshydev.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-11-25T19:17:14+00:00</updated><id>https://weshydev.github.io/feed.xml</id><title type="html">blank</title><subtitle>Welcome to the personal website of Omar Elweshy </subtitle><entry><title type="html">Building a Load-Shedding System in Go. Prioritizing Tasks Under Heavy Load</title><link href="https://weshydev.github.io/blog/2024/exploring-load-shedding-in-go/" rel="alternate" type="text/html" title="Building a Load-Shedding System in Go. Prioritizing Tasks Under Heavy Load"/><published>2024-11-23T12:00:00+00:00</published><updated>2024-11-23T12:00:00+00:00</updated><id>https://weshydev.github.io/blog/2024/exploring-load-shedding-in-go</id><content type="html" xml:base="https://weshydev.github.io/blog/2024/exploring-load-shedding-in-go/"><![CDATA[<p>Have you ever wondered how big tech companies keep their services running smoothly, even when millions of users are online at the same time? One of the secrets behind this magic is a concept called <strong>load shedding</strong>. In this blog post, we’ll dive into what load shedding is and build a small-scale system in Go to see it in action.</p> <h2 id="real-life-scenario-video-streaming-platform"><strong>Real-Life Scenario: Video Streaming Platform</strong></h2> <p>Imagine you’re running a popular video streaming platform. Users request video playback, subtitles, recommendations, and analytics. But when traffic become heavy say, during the release of a new movie, your servers can’t handle everything at once. Here’s what happens:</p> <ol> <li><strong>Critical Task</strong>: Delivering the video playback stream is non-negotiable.</li> <li><strong>Important Task</strong>: Subtitles and audio syncing enhance user experience but aren’t as critical as playback.</li> <li><strong>Optional Task</strong>: Collecting analytics for recommendations is great but can be dropped without affecting users.</li> </ol> <p><strong>Load shedding</strong> ensures your system prioritizes the playback stream and subtitles while shedding analytics during heavy traffic.</p> <h2 id="the-plan"><strong>The Plan</strong></h2> <p>We’ll create:</p> <ol> <li><strong>Task Generator</strong>: Simulates user requests (e.g., playback, subtitles, analytics).</li> <li><strong>Load Manager</strong>: Decides which tasks to accept or drop based on system load.</li> <li><strong>Worker Pool</strong>: Processes tasks concurrently.</li> <li><strong>Logger</strong>: Tracks accepted, processed, and dropped tasks.</li> </ol> <h2 id="step-1-task-structure"><strong>Step 1: Task Structure</strong></h2> <p>First, define the structure of a task in Go:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
	<span class="s">"math/rand"</span>
	<span class="s">"sync"</span>
	<span class="s">"time"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">Task</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">ID</span>       <span class="kt">int</span>
	<span class="n">Priority</span> <span class="kt">string</span>
	<span class="n">Duration</span> <span class="n">time</span><span class="o">.</span><span class="n">Duration</span>
<span class="p">}</span>
</code></pre></div></div> <p>Each task represents a user request. For example:</p> <ul> <li><strong>Playback</strong>: High priority</li> <li><strong>Subtitles</strong>: Medium priority</li> <li><strong>Analytics</strong>: Low priority</li> </ul> <h2 id="step-2-load-manager"><strong>Step 2: Load Manager</strong></h2> <p>The Load Manager controls the system’s task queue and ensures only tasks within capacity are processed.</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">LoadManager</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">mu</span>          <span class="n">sync</span><span class="o">.</span><span class="n">Mutex</span>
	<span class="n">taskQueue</span>   <span class="p">[]</span><span class="n">Task</span>
	<span class="n">maxCapacity</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewLoadManager</span><span class="p">(</span><span class="n">capacity</span> <span class="kt">int</span><span class="p">)</span> <span class="o">*</span><span class="n">LoadManager</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="n">LoadManager</span><span class="p">{</span>
		<span class="n">taskQueue</span><span class="o">:</span>   <span class="nb">make</span><span class="p">([]</span><span class="n">Task</span><span class="p">,</span> <span class="m">0</span><span class="p">),</span>
		<span class="n">maxCapacity</span><span class="o">:</span> <span class="n">capacity</span><span class="p">,</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p><strong>Accepting Tasks</strong></p> <p>Tasks are accepted or dropped based on priority:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">lm</span> <span class="o">*</span><span class="n">LoadManager</span><span class="p">)</span> <span class="n">AcceptTask</span><span class="p">(</span><span class="n">task</span> <span class="n">Task</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="n">lm</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
	<span class="k">defer</span> <span class="n">lm</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">Unlock</span><span class="p">()</span>

	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">lm</span><span class="o">.</span><span class="n">taskQueue</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">lm</span><span class="o">.</span><span class="n">maxCapacity</span> <span class="p">{</span>
		<span class="k">if</span> <span class="n">task</span><span class="o">.</span><span class="n">Priority</span> <span class="o">==</span> <span class="s">"Low"</span> <span class="p">{</span>
			<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Task %d dropped (Analytics - Low priority)</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">task</span><span class="o">.</span><span class="n">ID</span><span class="p">)</span>
			<span class="k">return</span> <span class="no">false</span>
		<span class="p">}</span>
		<span class="n">lm</span><span class="o">.</span><span class="n">shedLoad</span><span class="p">(</span><span class="n">task</span><span class="o">.</span><span class="n">Priority</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="n">lm</span><span class="o">.</span><span class="n">taskQueue</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">lm</span><span class="o">.</span><span class="n">taskQueue</span><span class="p">,</span> <span class="n">task</span><span class="p">)</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Task %d accepted (Priority: %s)</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">task</span><span class="o">.</span><span class="n">ID</span><span class="p">,</span> <span class="n">task</span><span class="o">.</span><span class="n">Priority</span><span class="p">)</span>
	<span class="k">return</span> <span class="no">true</span>
<span class="p">}</span>
</code></pre></div></div> <p><strong>Shedding Load</strong></p> <p>When capacity is full, the system drops lower-priority tasks to make space:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">lm</span> <span class="o">*</span><span class="n">LoadManager</span><span class="p">)</span> <span class="n">shedLoad</span><span class="p">(</span><span class="n">minPriority</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">priorities</span> <span class="o">:=</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="s">"High"</span><span class="o">:</span> <span class="m">1</span><span class="p">,</span> <span class="s">"Medium"</span><span class="o">:</span> <span class="m">2</span><span class="p">,</span> <span class="s">"Low"</span><span class="o">:</span> <span class="m">3</span><span class="p">}</span>

	<span class="n">newQueue</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="n">Task</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
	<span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">task</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">lm</span><span class="o">.</span><span class="n">taskQueue</span> <span class="p">{</span>
		<span class="k">if</span> <span class="n">priorities</span><span class="p">[</span><span class="n">task</span><span class="o">.</span><span class="n">Priority</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">priorities</span><span class="p">[</span><span class="n">minPriority</span><span class="p">]</span> <span class="p">{</span>
			<span class="n">newQueue</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">newQueue</span><span class="p">,</span> <span class="n">task</span><span class="p">)</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Task %d shed (Priority: %s)</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">task</span><span class="o">.</span><span class="n">ID</span><span class="p">,</span> <span class="n">task</span><span class="o">.</span><span class="n">Priority</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="n">lm</span><span class="o">.</span><span class="n">taskQueue</span> <span class="o">=</span> <span class="n">newQueue</span>
<span class="p">}</span>
</code></pre></div></div> <p><strong>Fetching Tasks for Processing</strong></p> <p>Workers will use this function to fetch tasks:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">lm</span> <span class="o">*</span><span class="n">LoadManager</span><span class="p">)</span> <span class="n">GetNextTask</span><span class="p">()</span> <span class="o">*</span><span class="n">Task</span> <span class="p">{</span>
	<span class="n">lm</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
	<span class="k">defer</span> <span class="n">lm</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">Unlock</span><span class="p">()</span>

	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">lm</span><span class="o">.</span><span class="n">taskQueue</span><span class="p">)</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">nil</span>
	<span class="p">}</span>

	<span class="n">task</span> <span class="o">:=</span> <span class="n">lm</span><span class="o">.</span><span class="n">taskQueue</span><span class="p">[</span><span class="m">0</span><span class="p">]</span>
	<span class="n">lm</span><span class="o">.</span><span class="n">taskQueue</span> <span class="o">=</span> <span class="n">lm</span><span class="o">.</span><span class="n">taskQueue</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="p">]</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="n">task</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="step-3-worker-pool"><strong>Step 3: Worker Pool</strong></h2> <p>Workers process accepted tasks concurrently:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">worker</span><span class="p">(</span><span class="n">id</span> <span class="kt">int</span><span class="p">,</span> <span class="n">lm</span> <span class="o">*</span><span class="n">LoadManager</span><span class="p">,</span> <span class="n">wg</span> <span class="o">*</span><span class="n">sync</span><span class="o">.</span><span class="n">WaitGroup</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">defer</span> <span class="n">wg</span><span class="o">.</span><span class="n">Done</span><span class="p">()</span>

	<span class="k">for</span> <span class="p">{</span>
		<span class="n">task</span> <span class="o">:=</span> <span class="n">lm</span><span class="o">.</span><span class="n">GetNextTask</span><span class="p">()</span>
		<span class="k">if</span> <span class="n">task</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">100</span> <span class="o">*</span> <span class="n">time</span><span class="o">.</span><span class="n">Millisecond</span><span class="p">)</span>
			<span class="k">continue</span>
		<span class="p">}</span>

		<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Worker %d processing task %d (Priority: %s)</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">task</span><span class="o">.</span><span class="n">ID</span><span class="p">,</span> <span class="n">task</span><span class="o">.</span><span class="n">Priority</span><span class="p">)</span>
		<span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">task</span><span class="o">.</span><span class="n">Duration</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="step-4-task-generator"><strong>Step 4: Task Generator</strong></h2> <p>Generate user requests with random priorities and durations:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">generateTask</span><span class="p">(</span><span class="n">id</span> <span class="kt">int</span><span class="p">)</span> <span class="n">Task</span> <span class="p">{</span>
	<span class="n">priorities</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"High"</span><span class="p">,</span> <span class="s">"Medium"</span><span class="p">,</span> <span class="s">"Low"</span><span class="p">}</span>
	<span class="n">duration</span> <span class="o">:=</span> <span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="p">(</span><span class="n">rand</span><span class="o">.</span><span class="n">Intn</span><span class="p">(</span><span class="m">2000</span><span class="p">)</span><span class="o">+</span><span class="m">500</span><span class="p">)</span> <span class="o">*</span> <span class="n">time</span><span class="o">.</span><span class="n">Millisecond</span>

	<span class="k">return</span> <span class="n">Task</span><span class="p">{</span>
		<span class="n">ID</span><span class="o">:</span>       <span class="n">id</span><span class="p">,</span>
		<span class="n">Priority</span><span class="o">:</span> <span class="n">priorities</span><span class="p">[</span><span class="n">rand</span><span class="o">.</span><span class="n">Intn</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">priorities</span><span class="p">))],</span>
		<span class="n">Duration</span><span class="o">:</span> <span class="n">duration</span><span class="p">,</span>
	<span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div> <h2 id="step-5-main-function"><strong>Step 5: Main Function</strong></h2> <p>Combine everything to simulate the load-shedding system:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">rand</span><span class="o">.</span><span class="n">Seed</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span><span class="o">.</span><span class="n">UnixNano</span><span class="p">())</span>

	<span class="n">maxCapacity</span> <span class="o">:=</span> <span class="m">10</span>
	<span class="n">numWorkers</span> <span class="o">:=</span> <span class="m">3</span>
	<span class="n">totalTasks</span> <span class="o">:=</span> <span class="m">50</span>

	<span class="n">loadManager</span> <span class="o">:=</span> <span class="n">NewLoadManager</span><span class="p">(</span><span class="n">maxCapacity</span><span class="p">)</span>
	<span class="k">var</span> <span class="n">wg</span> <span class="n">sync</span><span class="o">.</span><span class="n">WaitGroup</span>

	<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">numWorkers</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="n">wg</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
		<span class="k">go</span> <span class="n">worker</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">loadManager</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">wg</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="k">for</span> <span class="n">id</span> <span class="o">:=</span> <span class="m">1</span><span class="p">;</span> <span class="n">id</span> <span class="o">&lt;=</span> <span class="n">totalTasks</span><span class="p">;</span> <span class="n">id</span><span class="o">++</span> <span class="p">{</span>
		<span class="n">task</span> <span class="o">:=</span> <span class="n">generateTask</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
		<span class="n">loadManager</span><span class="o">.</span><span class="n">AcceptTask</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
		<span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="p">(</span><span class="n">rand</span><span class="o">.</span><span class="n">Intn</span><span class="p">(</span><span class="m">500</span><span class="p">))</span> <span class="o">*</span> <span class="n">time</span><span class="o">.</span><span class="n">Millisecond</span><span class="p">)</span>
	<span class="p">}</span>
	
	<span class="n">wg</span><span class="o">.</span><span class="n">Wait</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="step-6-running-the-program"><strong>Step 6: Running the Program</strong></h2> <p>Save your code in <code class="language-plaintext highlighter-rouge">main.go</code> and run it:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go run main.go
</code></pre></div></div> <h2 id="what-youll-see"><strong>What You’ll See</strong></h2> <p>The logs will show something like this:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Task 1 accepted <span class="o">(</span>Priority: Medium<span class="o">)</span>
Task 2 accepted <span class="o">(</span>Priority: Low<span class="o">)</span>
Task 3 accepted <span class="o">(</span>Priority: High<span class="o">)</span>
Worker 1 processing task 1 <span class="o">(</span>Priority: Medium<span class="o">)</span>
Worker 2 processing task 3 <span class="o">(</span>Priority: High<span class="o">)</span>
Task 15 dropped <span class="o">(</span>Low priority<span class="o">)</span>
Task 18 shed <span class="o">(</span>Priority: Low<span class="o">)</span>
</code></pre></div></div> <p><strong>Key Observations</strong>:</p> <ul> <li>High-priority tasks (e.g., playback) are always accepted.</li> <li>Medium-priority tasks (e.g., subtitles) are processed when capacity allows.</li> <li>Low-priority tasks (e.g., analytics) are the first to be dropped under heavy load.</li> </ul> <h2 id="conclusion">Conclusion</h2> <p>This system mirrors real-world scenarios like video streaming platforms prioritizing playback and subtitles over analytics. Understanding and implementing load shedding is essential for building resilient systems that can handle high traffic without buckling under pressure.</p> <p>You can find the complete code on <a href="https://github.com/omarelweshy/golang-load-shedding">Github</a></p>]]></content><author><name></name></author><category term="backend"/><category term="distributed-systems"/><summary type="html"><![CDATA[Learn how to build a load-shedding system in Go to prioritize critical tasks under heavy load. This guide simulates real-world scenarios, like handling video playback and analytics, using task queues, priority-based logic, and worker pools to keep systems responsive. Perfect for exploring backend resilience techniques!]]></summary></entry><entry><title type="html">How To Create Load Balancer With Nginx And Docker</title><link href="https://weshydev.github.io/blog/2022/how-to-create-load-balancer-with-nginx-and-docker/" rel="alternate" type="text/html" title="How To Create Load Balancer With Nginx And Docker"/><published>2022-12-01T10:00:00+00:00</published><updated>2022-12-01T10:00:00+00:00</updated><id>https://weshydev.github.io/blog/2022/how-to-create-load-balancer-with-nginx-and-docker</id><content type="html" xml:base="https://weshydev.github.io/blog/2022/how-to-create-load-balancer-with-nginx-and-docker/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>It’s crucial to ensure that your web applications are always available and can handle high traffic. That’s where a load balancer comes in - it distributes incoming traffic evenly across multiple servers, maximizing performance and minimizing downtime.</p> <p>But setting up a load balancer can be a daunting task, especially for those who are new to the world of web development. That’s why we’ve created this guide - to walk you through the process of creating a load balancer using Docker and NGINX. These tools are powerful, flexible and easy to use, making them the perfect choice for load balancing.</p> <h2 id="preparation">Preparation</h2> <p>You need to install the following:</p> <ul> <li>Nodejs</li> <li>Docker</li> <li>Nignx</li> </ul> <h2 id="file-structure">File Structure</h2> <p>Our file Structure will be like this</p> <p><img src="/assets/img/node-docker.png" alt="Docker Node Server"/></p> <p>Dockerfile</p> <div class="language-docker highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> node:16</span>
<span class="k">WORKDIR</span><span class="s"> /home/node/app</span>
<span class="k">COPY</span><span class="s"> app /home/node/app</span>
<span class="k">RUN </span>npm <span class="nb">install</span>
<span class="k">RUN </span>npm run app
<span class="k">EXPOSE</span><span class="s"> 3000</span>
</code></pre></div></div> <p>index.js</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">)();</span>

<span class="nx">app</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="s2">`Hello from </span><span class="p">${</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">appId</span><span class="p">}</span><span class="s2"> docker`</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nf">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">app at http://localhost:3000</span><span class="dl">"</span><span class="p">));</span>
</code></pre></div></div> <p>package.json</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"app"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"main"</span><span class="p">:</span><span class="w"> </span><span class="s2">"index.js"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"app"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node index.js"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"keywords"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
    </span><span class="nl">"author"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
    </span><span class="nl">"license"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ISC"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"express"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.18.2"</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h2 id="create-multiple-container">Create Multiple Container</h2> <p>We need to create multiple images point to the nodejs server with different ports</p> <p>First you should build the app into Container</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> nodeapplication <span class="nb">.</span>
</code></pre></div></div> <p>then</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-p</span> &lt;PORT&gt;:3000 <span class="nt">-e</span> <span class="nv">appId</span><span class="o">=</span>&lt;ID&gt; <span class="nt">-d</span> nodeapplication
</code></pre></div></div> <p>the result</p> <p><img src="/assets/img/docker-images.png" alt="Docker Creation"/></p> <p>Now if you checked your browser for every port should be serve your images with spicified ports correctly. for example port 3001</p> <p><img src="/assets/img/docker-id-browser.png" alt="Docker id browser"/></p> <p>and so on.</p> <h2 id="setting-nginx-up">Setting Nginx Up</h2> <p>After Installing Nginx to your machine, we will work with <code class="language-plaintext highlighter-rouge">/etc/nginx/nginx.conf</code>. Copy code below to your <code class="language-plaintext highlighter-rouge">nginx.conf</code> file</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http <span class="o">{</span>
    upstream containers <span class="o">{</span>
        server 127.0.0.1:3001<span class="p">;</span>
        server 127.0.0.1:3002<span class="p">;</span>
        server 127.0.0.1:3003<span class="p">;</span>
        server 127.0.0.1:3004<span class="p">;</span>
        server 127.0.0.1:3005<span class="p">;</span>
    <span class="o">}</span>
    server <span class="o">{</span>
        listen 80<span class="p">;</span>
        location / <span class="o">{</span>
            proxy_pass http://containers/<span class="p">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

events <span class="o">{}</span>
</code></pre></div></div> <p>Now we Created upstream called containers to serve all our backend and we also created server listen to port <code class="language-plaintext highlighter-rouge">80</code> and proxy_pass to our containers upstream.</p> <p>If we visit <code class="language-plaintext highlighter-rouge">localhost</code> we should see nginx balancing and switching between created containters.</p> <p><img src="/assets/video/balancer.gif" alt="balancer on browser"/></p> <p>You can notice that it serve in sequential order that is because nginx uses <a href="https://en.wikipedia.org/wiki/Round-robin_scheduling">Round Robin Algorithm</a></p> <h2 id="conclusion">Conclusion</h2> <p>In conclusion, creating a load balancer with Docker and NGINX is a powerful way to ensure the availability and performance of your web application. By distributing incoming traffic evenly across multiple servers, a load balancer can maximize performance and minimize downtime.</p>]]></content><author><name></name></author><category term="devops"/><category term="nginx"/><category term="docker"/><category term="load-balancer"/><summary type="html"><![CDATA[It's crucial to ensure that your web applications are always available and can handle high traffic. That's where a load balancer comes in.]]></summary></entry><entry><title type="html">How To Manage Dotfiles</title><link href="https://weshydev.github.io/blog/2021/how-to-manage-dotfiles/" rel="alternate" type="text/html" title="How To Manage Dotfiles"/><published>2021-10-07T10:00:00+00:00</published><updated>2021-10-07T10:00:00+00:00</updated><id>https://weshydev.github.io/blog/2021/how-to-manage-dotfiles</id><content type="html" xml:base="https://weshydev.github.io/blog/2021/how-to-manage-dotfiles/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>When your OS crashes or you needed to change it, you will reconfigure <code class="language-plaintext highlighter-rouge">.dotfiles</code> such as <code class="language-plaintext highlighter-rouge">.zsh</code>, <code class="language-plaintext highlighter-rouge">.gitconfig</code> and <code class="language-plaintext highlighter-rouge">.vimrc</code>. These <code class="language-plaintext highlighter-rouge">.dotfiles</code> change over time as you start customizing linux according to your needs. How do we save this configurations to avoid manual work every time ? The answer is <strong>Dotfiles Manager</strong>.</p> <h2 id="how-to-build-a-dotfile-manager">How to build a Dotfile Manager</h2> <p>There are alot of Dotfile Managers out there, for example <a href="https://www.atlassian.com/">atlassian</a>, <a href="https://yadm.io/">yadm</a> and more <a href="https://dotfiles.github.io/utilities/">here</a>. I prefer the scratch way.</p> <p>First of all, you should <a href="https://github.com/new">Create a new repository</a> on GitHub named <code class="language-plaintext highlighter-rouge">.dotfiles</code> and clone it in the $HOME directory where you will host your dotfiles. Clone your repo to the <code class="language-plaintext highlighter-rouge">.dotfiles</code> directory</p> <p>SSH</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:&lt;YOUR_GITHUB_USERNAME&gt;/.dotfiles.git ~/.dotfiles
</code></pre></div></div> <p>HTTPS</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/&lt;YOUR_GITHUB_USERNAME&gt;/.dotfiles.git ~/.dotfiles
</code></pre></div></div> <p>Now, you have an empty directory. The next step is to add your files in it. Move your files to <code class="language-plaintext highlighter-rouge">~/.dotfiles</code>.</p> <p><img src="/assets/img/dotfiles_dir.png" alt="Dotfiles Dir"/></p> <p>For simplicity, we will work on the <code class="language-plaintext highlighter-rouge">.tmux.conf</code> file then you can do this for the rest of files.</p> <p>Now, we will move <code class="language-plaintext highlighter-rouge">.tmux.conf</code> to <code class="language-plaintext highlighter-rouge">~/.dotfiles</code> directory. You can use <code class="language-plaintext highlighter-rouge">mv</code> to move file to <code class="language-plaintext highlighter-rouge">.dotfiles</code>, for example</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mv</span> .tmux.conf .dotfiles/
</code></pre></div></div> <p><img src="/assets/img/mv.png" alt="mv"/></p> <p>With the command <code class="language-plaintext highlighter-rouge">ll -al ~/.dotfiles | grep tmux</code> we search for any files or directories contains tmux name in <code class="language-plaintext highlighter-rouge">~/.dtofiles</code> but not found. After run <code class="language-plaintext highlighter-rouge">mv .tmux.conf .dotfiles</code> and search again <code class="language-plaintext highlighter-rouge">.tmux.conf</code> file moved to <code class="language-plaintext highlighter-rouge">.dotfiles</code> directory successfully.</p> <h4 id="but"><strong>BUT</strong></h4> <p><em>The Tmux configuration has broken</em>. Of course, broken because there is no configuration file in the $HOME directory were in, it’s in the <code class="language-plaintext highlighter-rouge">~/.dotfiles</code> directory. How do we use this file and at the same time keep it tracked by git in <code class="language-plaintext highlighter-rouge">~/.dotfiles</code>?</p> <p>We use <code class="language-plaintext highlighter-rouge">ln</code> util to link file from <code class="language-plaintext highlighter-rouge">~/.dotfiles</code> directory to same file in the $HOME directory where can tmux use it and track all changes.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ln</span> <span class="nt">-s</span> ~/.dotfiles/.tmux.conf ~/.tmux.conf
</code></pre></div></div> <p>With the command above we created a copy of the <code class="language-plaintext highlighter-rouge">.tmux.conf</code> file to the $HOME directory with a link as shown below</p> <p><img src="/assets/img/linking_file.png" alt="Link betweem files"/></p> <p>Everything is ready. By opening <code class="language-plaintext highlighter-rouge">~/dotfiles/.tmux.conf</code> and <code class="language-plaintext highlighter-rouge">~/.tmux.conf</code> side-by-side, every editing happens to any of two files, it happens to another.</p> <p><img src="/assets/video/tracking.gif" alt="Tracking"/> we have a file that configures tmux and same file tracked by git into your <code class="language-plaintext highlighter-rouge">.dotfiles</code> github repo.</p> <p>Finally go to <code class="language-plaintext highlighter-rouge">~/.dotfiles</code> and push to Github.</p> <p><a href="https://github.com/omarelweshy/.dotfiles">Here is my repo</a> with the code.</p> <h2 id="summary">Summary</h2> <p>Let’s summarize some important things we have done.</p> <ol> <li>Create repo named <code class="language-plaintext highlighter-rouge">.dotfiles</code></li> <li>Clone it into your Home dir</li> </ol> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:&lt;YOUR_GITHUB_USERNAME&gt;/.dotfiles.git ~/.dotfiles
</code></pre></div></div> <ol> <li>Move your files to <code class="language-plaintext highlighter-rouge">~/.dotfiles</code> using <code class="language-plaintext highlighter-rouge">mv</code></li> <li>Link your moved files with <code class="language-plaintext highlighter-rouge">ln</code> and it will automatically copied for you</li> <li>Push your files to Github</li> </ol>]]></content><author><name></name></author><category term="linux"/><category term="productivity"/><category term="linux"/><category term="dotfiles"/><summary type="html"><![CDATA[When your OS crashes or you needed to change it, so?]]></summary></entry></feed>